configfile: "config.yaml"

SAMPLES1        = config["SAMPLES1"]
REFERENCES	= config["REFERENCES"]
LOGS            = config["LOGS"]
DIR             = config["DIR7"]
GENE_MODEL      = config["GENE_MODEL"]
ANNOTATION      = config["ANNOTATION"]

################
# Pseudo-rules #
################
# By convention, the first rule should be called "all" and it's "input" defined as
# the list of ALL the files you want the workflow to create. e.g.:
rule all:
	input:
		GENE_MODEL+"/gene_model_RNA.gtf"
		GENE_MODEL+"/gene_model_RNA.gff3",
		GENE_MODEL+"/transcript.fasta",
		GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.pep",
		GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.cds",
		GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.gff3",
		GENE_MODEL+"/transcript.fasta.transdecoder_dir/base_freqs.dat",
		GENE_MODEL+"/transcript.fasta.gene_trans_map",
		ANNOTATION+"/uniprot/uniprot_sprot.pep.phr",
		ANNOTATION+"/uniprot/uniprot_sprot.pep.pin",
		ANNOTATION+"/uniprot/uniprot_sprot.pep.psq",
		ANNOTATION+"/blastp.outfmt6",
		ANNOTATION+"/blastp.modified.outfmt6",
		ANNOTATION+"/blastx.outfmt6",
		ANNOTATION+"/blastx.modified.outfmt6",
		ANNOTATION+"/pfam/Pfam-A.hmm.h3f",
		ANNOTATION+"/pfam/Pfam-A.hmm.h3i",
		ANNOTATION+"/pfam/Pfam-A.hmm.h3m",
		ANNOTATION+"/pfam/Pfam-A.hmm.h3p",
		ANNOTATION+"/TrinotatePFAM.out",
		ANNOTATION+"/trinotate_annotation_report.xls",
		ANNOTATION+"/go_annotations.txt",
		GENE_MODEL+"/transcript.fasta.transdecoder.bed",
		GENE_MODEL+"/transcript.fasta.transdecoder.cds",
		GENE_MODEL+"/transcript.fasta.transdecoder.pep",
		GENE_MODEL+"/transcript.fasta.transdecoder.gff3",
		GENE_MODEL+"/gene_model_protein.gff3"

################
# Rules Proper #
################

rule merge_assemblies:
	input:
		GENE_MODEL+"/assemblies.txt"
	output:
		GENE_MODEL+"/gene_model_RNA.gtf"
	conda:
		"envs/cufflinks.yaml"
	params: 
		genome = REFERENCES+"/Plantago_ovata_ncbi.fasta",
		output = "gffcmp.combined.gtf"
	shell:
		"""
		gffcompare -D -s {params.genome} -i {input} &&
		mv {params.output} {output}
		"""
		
rule gtftofasta:
	input:
		gtf = GENE_MODEL+"/gene_model_RNA.gtf",
		ref = REFERENCES+"/Plantago_ovata_ncbi.fasta"
	output:
		GENE_MODEL+"/transcript.fasta"
	conda:
		"envs/gene_model.yaml"
	shell:
		"""
		gtf_genome_to_cdna_fasta.pl {input.gtf} {input.ref} > {output}
		"""

rule gtftogff3:
	input:
		GENE_MODEL+"/gene_model_RNA.gtf"
	output:
		GENE_MODEL+"/gene_model_RNA.gff3"
	conda:
		"envs/gene_model.yaml"
	shell:
		"""
		gtf_to_alignment_gff3.pl {input} > {output}
		"""
	
rule best_ORF:
	input:
		GENE_MODEL+"/transcript.fasta"
	output:
		file1 = GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.pep",
		file2 = GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.cds",
		file3 = GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.gff3",
		file4 = GENE_MODEL+"/transcript.fasta.transdecoder_dir/base_freqs.dat"
	conda:
		"envs/gene_model.yaml"
	params:
		directory(GENE_MODEL+"/transcript.fasta.transdecoder_dir")
	shell:
		"""
		TransDecoder.LongOrfs -S -m 50 -t {input} --output_dir {params}
		"""

rule database_uniprot:
	input:
		ANNOTATION+"/uniprot/uniprot_sprot.pep"
	output:
		one = ANNOTATION+"/uniprot/uniprot_sprot.pep.phr",
		two = ANNOTATION+"/uniprot/uniprot_sprot.pep.pin",
		three = ANNOTATION+"/uniprot/uniprot_sprot.pep.psq"
	conda:
		"envs/gene_model.yaml"
	shell:
		"""
		makeblastdb -in {input} -dbtype prot
		"""

rule blastP:
	input:
		GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.pep"
	output:
		ANNOTATION+"/blastp.outfmt6"
	conda:
		"envs/gene_model.yaml"
	params:
		ANNOTATION+"/uniprot/uniprot_sprot.pep"
	shell:
		"""
		blastp -query {input} -db {params} -max_target_seqs 1 \
		-outfmt 6 -evalue 1e-3 -num_threads 8 -out {output}
		"""
		
rule modified_blastp:
	input:
		ANNOTATION+"/blastp.outfmt6"
	output:
		ANNOTATION+"/blastp.modified.outfmt6"
	shell:
		"""
		sed '/^TCONS/s/sp.*|//' {input} > {output}
		"""

rule blastX:
	input:
		GENE_MODEL+"/transcript.fasta"
	output:
		ANNOTATION+"/blastx.outfmt6"
	conda:
		"envs/gene_model.yaml"
	params:
		ANNOTATION+"/uniprot/uniprot_sprot.pep"
	shell:
		"""
		blastx -query {input} -db {params} -max_target_seqs 1 \
		-outfmt 6 -evalue 1e-3 -num_threads 8 -out {output}
		"""

rule modified_blastx:
	input:
		ANNOTATION+"/blastx.outfmt6"
	output:
		ANNOTATION+"/blastx.modified.outfmt6"
	shell:
		"""
		sed '/^TCONS/s/sp.*|//' {input} > {output}
		"""
rule hmmpress:
	input:
		ANNOTATION+"/pfam/Pfam-A.hmm"
	output:
		one = ANNOTATION+"/pfam/Pfam-A.hmm.h3f",
		two = ANNOTATION+"/pfam/Pfam-A.hmm.h3i",
		three = ANNOTATION+"/pfam/Pfam-A.hmm.h3m",
		four = ANNOTATION+"/pfam/Pfam-A.hmm.h3p"
	conda:
		"envs/gene_model.yaml"
	shell:
		"""
		hmmpress {input}
		"""

rule hmmscan:
	input:
		GENE_MODEL+"/transcript.fasta.transdecoder_dir/longest_orfs.pep"
	output:
		ANNOTATION+"/TrinotatePFAM.out"
	conda:
		"envs/gene_model.yaml"
	params:
		ANNOTATION+"/pfam/Pfam-A.hmm"
	shell:
		"""
		hmmsearch --cpu 8 --domtblout {output} {params} {input}
		"""

rule predict_transcript:
	input:
		fasta = GENE_MODEL+"/transcript.fasta",
		blastp = ANNOTATION+"/blastp.modified.outfmt6",
		pfam = ANNOTATION+"/TrinotatePFAM.out",
	output:
		o1 = GENE_MODEL+"/transcript.fasta.transdecoder.bed",
		o2 = GENE_MODEL+"/transcript.fasta.transdecoder.cds",
		o3 = GENE_MODEL+"/transcript.fasta.transdecoder.pep",
		o4 = GENE_MODEL+"/transcript.fasta.transdecoder.gff3",
	conda: 
		"envs/gene_model.yaml"
	params:
		dir = directory(GENE_MODEL+"/transcript.fasta.transdecoder_dir"),
		o1 = "transcript.fasta.transdecoder.bed",
		o2 = "transcript.fasta.transdecoder.cds",
		o3 = "transcript.fasta.transdecoder.pep",
		o4 = "transcript.fasta.transdecoder.gff3"
	shell:
		"""
		TransDecoder.Predict -t {input.fasta} --retain_blastp_hits {input.blastp} --retain_pfam_hits {input.pfam} --output_dir {params.dir} &&
		mv {params.o1} {output.o1}
		mv {params.o2} {output.o2}
		mv {params.o3} {output.o3}
		mv {params.o4} {output.o4}
		"""


rule predict_genome:
	input:
		one = GENE_MODEL+"/transcript.fasta.transdecoder.gff3",
		two = GENE_MODEL+"/gene_model_RNA.gff3",
		three = GENE_MODEL+"/transcript.fasta"
	output:
		GENE_MODEL+"/gene_model_protein.gff3"
	conda:
		"envs/gene_model.yaml"
	shell:
		"""
		cdna_alignment_orf_to_genome_orf.pl {input.one} {input.two} {input.three} > {output}
		"""

rule gene_trans_map:
	input:
		GENE_MODEL+"/transcript.fasta"
	output:
		GENE_MODEL+"/transcript.fasta.gene_trans_map"
	shell:
		"""
		grep '^>' {input} | sed 's/^>//' | awk 'BEGIN{{FS=" "; OFS="\t"}};{{print$2,$1}}' > {output}
		"""

rule trinotate:
	input:
		map = GENE_MODEL+"/transcript.fasta.gene_trans_map",
		file = ANNOTATION+"/Trinotate.sqlite",
		fasta = GENE_MODEL+"/transcript.fasta",
		pep = GENE_MODEL+"/transcript.fasta.transdecoder.pep",
		blastp = ANNOTATION+"/blastp.modified.outfmt6",
		blastx = ANNOTATION+"/blastx.modified.outfmt6",
		pfam = ANNOTATION+"/TrinotatePFAM.out"
	output:
		ANNOTATION+"/trinotate_annotation_report.xls"
	conda:
		"envs/gene_model.yaml"
	shell:
		"""
		Trinotate {input.file} init --gene_trans_map {input.map} --transcript_fasta {input.fasta} \
		--transdecoder_pep {input.pep} &&
		Trinotate {input.file} LOAD_swissprot_blastp {input.blastp} &&
		Trinotate {input.file} LOAD_swissprot_blastx {input.blastx} &&
		Trinotate {input.file} LOAD_pfam {input.pfam} &&
		Trinotate {input.file} report -E 1e-3 > {output}
		"""

rule GO:
	input:
		ANNOTATION+"/trinotate_annotation_report.xls"
	output:
		ANNOTATION+"/go_annotations.txt"
	conda:
		"env/gene_model.yaml"
	shell:
		"""
		extract_GO_assignments_from_Trinotate_xls.pl --trans --include_ancestral_terms --Trinotate_xls {input} > {output}
		"""
