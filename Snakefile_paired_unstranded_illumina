configfile: "config.yaml"

SAMPLES         = config["SAMPLES5"]
READS           = config["READS1"]
ENVS            = config["ENVS"]
REFERENCES	= config["REFERENCES"]
LOGS            = config["LOGS"]
ADAPTERS        = config["ADAPTERS"]
RRNA            = config["RRNA"]
DIR             = config["DIR6"]
RAW             = config["RAW6"]
QC1             = config["QC6_1"]
MULTIQC1        = config["MULTIQC6_1"]
TRIMMED         = config["TRIMMED6"]
QC2             = config["QC6_2"]
MULTIQC2        = config["MULTIQC6_2"]
CLEAN           = config["CLEAN6"]
MULTIQC3        = config["MULTIQC6_3"]
MULTIQC4        = config["MULTIQC6_4"]
MAPPED          = config["MAPPED6"]
MULTIQC5        = config["MULTIQC6_5"]
CUFFLINK        = config["CUFFLINK6"]

################
# Pseudo-rules #
################
# By convention, the first rule should be called "all" and it's "input" defined as
# the list of ALL the files you want the workflow to create. e.g.:
rule all:
	input:
		expand(QC1+"/{SAMPLE}_{READ}_fastqc.html", SAMPLE=SAMPLES, READ=READS),
		MULTIQC1+"/multiqc_report.html",
		expand(TRIMMED+"/{SAMPLE}_{READ}.fastq.gz", SAMPLE=SAMPLES, READ=READS),
		expand(QC2+"/{SAMPLE}_{READ}_fastqc.html", SAMPLE=SAMPLES, READ=READS),
		MULTIQC2+"/multiqc_report.html",
		expand(CLEAN+"/{SAMPLE}_{READ}.fastq.gz", SAMPLE=SAMPLES, READ=READS),
		expand(CLEAN+"/{SAMPLE}_stat", SAMPLE=SAMPLES),
		MULTIQC3+"/multiqc_report.html",
		expand(MAPPED+"/{SAMPLE}Aligned.sortedByCoord.out.bam", SAMPLE=SAMPLES),
		MULTIQC4+"/multiqc_report.html",
		MULTIQC5+"/multiqc_report.html",
		expand(CUFFLINK+"/{SAMPLE}/transcripts.gtf", SAMPLE=SAMPLES),
		CUFFLINK+"/assemblies.txt",
		expand(MAPPED+"/{SAMPLE}Aligned.sortedByCoord.out.bam.bai", SAMPLE=SAMPLES)

################
# Rules Proper #
################
rule fastqc_raw:
	input:
		RAW+"/{SAMPLE}.fastq.gz"
	output:
		zip = QC1+"/{SAMPLE}_fastqc.zip",
		html = QC1+"/{SAMPLE}_fastqc.html"
	conda:
		"envs/fastqc.yaml"
	log:
		LOGS+"/fastqc_raw/{SAMPLE}"
	params: 
		QC1
	shell:
		"""
		fastqc -o {params} --threads 2 {input}
		2> {log}
		"""

rule multiqc_raw:
	input:
		expand(QC1+"/{SAMPLE}_{READ}_fastqc.html", SAMPLE=SAMPLES, READ=READS)
	output:
		MULTIQC1+"/multiqc_report.html"
	conda:
		"envs/multiqc.yaml"
	log:
		LOGS+"/multiqc_raw/multiqc_report"
	params:
		indir = QC1 ,
		outdir = MULTIQC1
	shell:
		"""
		multiqc {params.indir} -o {params.outdir}
		2> {log}
		"""

rule trimmomatic:
	input:
		r1 = RAW+"/{SAMPLE}_R1_001.fastq.gz",
		r2 = RAW+"/{SAMPLE}_R2_001.fastq.gz",
		adapters = ADAPTERS
	output:
		r1 = TRIMMED+"/{SAMPLE}_R1_001.fastq.gz",
		r1_unpaired = TRIMMED+"/{SAMPLE}_R1_001.unpaired.fastq.gz",
		r2 = TRIMMED+"/{SAMPLE}_R2_001.fastq.gz",
		r2_unpaired = TRIMMED+"/{SAMPLE}_R2_001.unpaired.fastq.gz"
	conda:
		"envs/trimmomatic.yaml"
	log:
		r1 = LOGS+"/trimmomatic/{SAMPLE}_R1_001",
		r2 = LOGS+"/trimmomatic/{SAMPLE}_R1_001.unpaired",
		r1_unpaired = LOGS+"/trimmomatic/{SAMPLE}_R2_001",
		r2_unpaired = LOGS+"/trimmomatic/{SAMPLE}_R2_001.unpaired"
	shell:
		"""
		trimmomatic PE -threads 2 {input.r1} {input.r2} {output.r1} {output.r1_unpaired} {output.r2} {output.r2_unpaired} ILLUMINACLIP:{input.adapters}:2:30:10:3:true LEADING:2 TRAILING:2 SLIDINGWINDOW:4:15 MINLEN:36
		"""

rule fastqc_trimmed:
	input:
		TRIMMED+"/{SAMPLE}.fastq.gz"
	output:
		zip = QC2+"/{SAMPLE}_fastqc.zip",
		html = QC2+"/{SAMPLE}_fastqc.html"
	conda:
		"envs/fastqc.yaml"
	log:
		LOGS+"/fastqc_trimmed/{SAMPLE}"
	params:
		QC2
	shell:
		"""
		fastqc -o {params} --threads 2 {input}
		2> {log}
		"""

rule multiqc_trimmed:
	input:
		expand(QC2+"/{SAMPLE}_{READ}_fastqc.html", SAMPLE=SAMPLES, READ=READS)
	output:
		MULTIQC2+"/multiqc_report.html"
	conda:
		"envs/multiqc.yaml"
	log:
		LOGS+"/multiqc_trimmed/multiqc_report"
	params:
		indir = QC2 ,
		outdir = MULTIQC2
	shell:
		"""
		multiqc {params.indir} -o {params.outdir} 
		2> {log}
		"""

rule bbmap:
	input:
		file1 = TRIMMED+"/{SAMPLES}_R1_001.fastq.gz",
		file2 = TRIMMED+"/{SAMPLES}_R2_001.fastq.gz",
		ref1 = RRNA+"/SILVA_128_LSURef_tax_silva.fasta.gz",
		ref2 = RRNA+"/SILVA_138_SSURef_NR99_tax_silva.fasta.gz",
		ref3 = RRNA+"/SILVA_138_SSURef_tax_silva.fasta.gz",
		ref4 = REFERENCES+"/plantago_chloroplast.fasta.gz",
		ref5 = REFERENCES+"/plantago_mitocondria.fasta.gz",
		ref7 = RRNA+"/Archaea.fasta.gz",
		ref8 = RRNA+"/Bacteria.fasta.gz",
		ref9 = RRNA+"/Mitochondria.fasta.gz",
		ref10 = RRNA+"/Plastids.fasta.gz",
		ref11 = RRNA+"/Eukaryota.fasta.gz",
	output:
		clean1 = CLEAN+"/{SAMPLES}_R1_001.fastq.gz",
		clean2 = CLEAN+"/{SAMPLES}_R2_001.fastq.gz",
		conta1 = CLEAN+"/conta/{SAMPLES}_R1_001.fastq.gz",
		conta2 = CLEAN+"/conta/{SAMPLES}_R2_001.fastq.gz",
		statistic = CLEAN+"/{SAMPLES}_stat"
	conda:
		"envs/bbmap.yaml"
	log:
		LOGS+"/bbmap/{SAMPLES}.bbduk.log"
	shell:
		"""
		bbduk.sh -Xmx20g in1={input.file1} in2={input.file2} out1={output.clean1} out2={output.clean2} \
		outm1={output.conta1} outm2={output.conta2} stats={output.statistic} \
		ref={input.ref1},{input.ref2},{input.ref3},{input.ref4},{input.ref5},{input.ref7},{input.ref8},{input.ref9},{input.ref10},{input.ref11}
		2> {log}
		"""

rule multiqc_clean:
	input:
		expand(CLEAN+"/{SAMPLE}_stat", SAMPLE=SAMPLES)
	output:
		MULTIQC3+"/multiqc_report.html"
	conda:
		"envs/multiqc.yaml"
	log:
		LOGS+"/multiqc_clean/multiqc_report"
	params:
		indir = CLEAN ,
		outdir = MULTIQC3
	shell:
		"""
		multiqc {params.indir} -o {params.outdir}
		2> {log}
		"""

rule star_mapping:
	input:
		file1 = CLEAN+"/{SAMPLES}_R1_001.fastq.gz",
		file2 = CLEAN+"/{SAMPLES}_R2_001.fastq.gz",
		index = directory(REFERENCES+"/STAR"),
	output:
		out1 = MAPPED+"/{SAMPLES}Aligned.sortedByCoord.out.bam",
		out2 = MAPPED+"/{SAMPLES}Log.final.out",
		out3 = MAPPED+"/{SAMPLES}Log.out",
		out4 = MAPPED+"/{SAMPLES}Log.progress.out",
		out5 = MAPPED+"/{SAMPLES}SJ.out.tab"
	conda:
		"envs/star.yaml"
	log:
		LOGS+"/star_mapping/{SAMPLES}"
	params:
		bam = directory(MAPPED),
		outfile = MAPPED+"/{SAMPLES}"
	shell:
		"""
		mkdir --parents {params.bam} &&
		STAR --runThreadN 8 \
		--genomeDir {input.index} \
		--readFilesIn {input.file1} {input.file2} \
		--readFilesCommand gunzip -c \
		--outFileNamePrefix {params.outfile} \
		--outSAMtype BAM SortedByCoordinate \
		--alignIntronMax 10000 \
		--outFilterScoreMinOverLread 0.75 \
		--outSJfilterCountUniqueMin 5 1 1 1 \
		--outSJfilterOverhangMin 35 20 20 20 \
		--outSAMstrandField intronMotif \
		--outFilterIntronMotifs RemoveNoncanonical \
		--outSAMattributes NM XS \
		--outSAMattrIHstart 0 \
		--alignSoftClipAtReferenceEnds No
		> {log}
		"""

rule multiqc_star:
	input:
		expand(MAPPED+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES)
	output:
		MULTIQC4+"/multiqc_report.html"
	conda:
		"envs/multiqc.yaml"
	log:
		LOGS+"/multiqc_star/multiqc_report"
	params:
		indir = MAPPED ,
		outdir = MULTIQC4
	shell:
		"""
		multiqc {params.indir} -o {params.outdir}
		2> {log}
		"""

rule multiqc_all:
	input:
		trimmed = expand(QC2+"/{SAMPLE}_{READ}_fastqc.html", SAMPLE=SAMPLES, READ=READS),
		clean = expand(CLEAN+"/{SAMPLE}_stat", SAMPLE=SAMPLES),
		mapped = expand(MAPPED+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES, READ=READS),
	output:
		MULTIQC5+"/multiqc_report.html"
	conda:
		"envs/multiqc.yaml"
	log:
		LOGS+"/multiqc_all/multiqc_report"
	params:
		indir1 = QC2 ,
		indir2 = CLEAN ,
		indir3 = MAPPED ,
		outdir = MULTIQC5
	shell:
		"""
		multiqc {params.indir1} {params.indir2} {params.indir3} -o {params.outdir}
		"""

rule cufflink:
	input:
		MAPPED+"/{SAMPLES}Aligned.sortedByCoord.out.bam"
	output:
		CUFFLINK+"/{SAMPLES}/transcripts.gtf"
	conda:
		"envs/cufflinks.yaml"
	log:
		LOGS+"/cufflink/{SAMPLES}"
	params:
		CUFFLINK+"/{SAMPLES}"
	shell:
		"""
		cufflinks -I 10000 --output-dir {params} {input} \
		> {log}
		"""

rule compose_merge:
	input:
		expand(CUFFLINK+"/{SAMPLE}/transcripts.gtf", SAMPLE=SAMPLES),
	output:
		txt=CUFFLINK+"/assemblies.txt"
	log:
		LOGS+"/compare_merge.log"
	run:
		with open(output.txt, "w") as out: print(*input, sep="\n", file=out)

rule samtools_bai1:
	input:
		MAPPED+"/{SAMPLES}Aligned.sortedByCoord.out.bam"
	output:
		MAPPED+"/{SAMPLES}Aligned.sortedByCoord.out.bam.bai"
	conda:
		"envs/samtools.yaml"
	params:
		""
	shell:
		"""
		samtools index {params} {input} {output}
		"""
