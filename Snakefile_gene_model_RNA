# A global singularity image to be used for all jobs - need to specify --use-singularity and have singularity available on the command line
# This image already contains the bioinformatic tools we will be using singularity:
#"file:///shared/.singularity/nextflow-embl-abr-webinar.simg", 
"docker://rsuchecki/nextflow-embl-abr-webinar"

configfile: "config.yaml"

SAMPLES1        = config["SAMPLES1"]
SAMPLES2        = config["SAMPLES2"]
SAMPLES3        = config["SAMPLES3"]
SAMPLES4        = config["SAMPLES4"]
SAMPLES5        = config["SAMPLES5"]
ENVS            = config["ENVS"]
REFERENCES	= config["REFERENCES"]
LOGS            = config["LOGS"]
DIR             = config["DIR7"]
GENE_MODEL      = config["GENE_MODEL7"]      
COUNTS          = config["COUNTS7"]
MULTIQC         = config["MULTIQC7"]
BAM1            = config["BAM7_1"]
BAM2            = config["BAM7_2"]
BAM3            = config["BAM7_3"]
BAM4            = config["BAM7_4"]
BAM5            = config["BAM7_5"]


################
# Pseudo-rules #
################
# By convention, the first rule should be called "all" and it's "input" defined as
# the list of ALL the files you want the workflow to create. e.g.:
rule all:
	input:
		GENE_MODEL+"/gene_model_RNA.gtf",
		COUNTS+"/counts.out",
		COUNTS+"/counts_2.out",
		MULTIQC+"/multiqc_report.html",

################
# Rules Proper #
################

rule merge_assemblies:
	input:
		GENE_MODEL+"/assemblies.txt"
	output:
		GENE_MODEL+"/gene_model_RNA.gtf"
	conda:
		"envs/cufflinks.yaml"
	params: 
		ref = REFERENCES+"/Plantago.fasta",
		merged = GENE_MODEL ,
		output = GENE_MODEL+"/merged.gtf" 
	shell:
		"""
		cuffmerge -p 5 -o {params.merged} -s {params.ref} {input} &&
		mv {params.output} {output}
		"""

rule counts:
	input:
		bam = expand(BAM1+"/{SAMPLE}Aligned.sortedByCoord.out.sorted.bam", SAMPLE=SAMPLES1),
		gtf = GENE_MODEL+"/gene_model_RNA.gtf",
	output:
		COUNTS+"/counts.out",
	conda:
		ENVS
	log:
		LOGS+"/counts.summary"
	params:
		COUNTS
	shell:
		"""
		featureCounts -t exon -g gene_id -f -O -s 2 -p -T 5 -a {input.gtf} -o {output} {input.bam} \
		> {log}
		"""

rule counts_2:
	input:
		bam = expand(BAM1+"/{SAMPLE}Aligned.sortedByCoord.out.sorted.bam", SAMPLE=SAMPLES1),
		gtf = GENE_MODEL+"/gene_model_RNA.gtf",
	output:
		COUNTS+"/counts_2.out",
	conda:
		ENVS
	log:
		LOGS+"/counts_2.summary"
	params:
		COUNTS
	shell:
		"""
		featureCounts -Q 10 -t exon -g gene_id -O -s 2 -p -T 5 -a {input.gtf} -o {output} {input.bam} \
		> {log}
		"""

rule multiqc_all:
	input:
		log1 = expand(BAM1+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES1),
		log2 = expand(BAM2+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES2),
		log3 = expand(BAM3+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES3),
		log4 = expand(BAM4+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES4),
		log5 = expand(BAM5+"/{SAMPLE}Log.final.out", SAMPLE=SAMPLES5),
	output:
		MULTIQC+"/multiqc_report.html"
	conda:
		"envs/multiqc.yaml"
	log:
		LOGS+"/multiqc_report"
	params:
		indir1 = BAM1 ,
		indir2 = BAM2 ,
		indir3 = BAM3 ,
		indir4 = BAM4 ,
		indir5 = BAM5 ,
		outdir = MULTIQC
	shell:
		"""
		multiqc {params.indir1} {params.indir2} {params.indir3} {params.indir4} {params.indir5} -o {params.outdir}
		2> {log}
		"""
